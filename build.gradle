buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "alpha-0.2.0"
group= "com.rwtema.tinkerstailor" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TinkersTailor"

minecraft {
    version = "1.7.10-10.13.4.1492-1.7.10"
    runDir = "eclipse"
}


repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI and stuff 
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven {
    	name 'DVS1 Maven FS'
    	url 'http://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
	compile "codechicken:ForgeMultipart:1.7.10-1.2.0.345:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.136:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.6.44:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.4.107:dev"
	compile "mantle:Mantle:1.7.10-0.3.2.jenkins190:deobf"
	compile "tconstruct:TConstruct:1.7.10-1.8.7.build981:deobf"
	compile "mods.natura:natura:1.7.10-107.779621d:deobf"

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
	manifest {
		attributes "FMLCorePlugin": "com.rwtema.tinkertailor.coremod.CoreTinkerTailor"
		attributes "FMLCorePluginContainsFMLMod": "true"
	}
}

task srcJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    from sourceSets.main.allSource
    manifest {
        attributes "FMLCorePlugin": "com.rwtema.tinkertailor.coremod.CoreTinkerTailor"
		attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

task devJar(type: Jar, dependsOn: classes) {
    classifier = 'dev'
    from sourceSets.main.output
    manifest {
        attributes "FMLCorePlugin": "com.rwtema.tinkertailor.coremod.CoreTinkerTailor"
		attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

artifacts {
    archives jar
    archives srcJar
    archives devJar
}